#! ruby
require 'test/unit'
require 'entropia'

class TestEntropia < Test::Unit::TestCase
  include ENTROPIA

  def test_001_new
    assert_nothing_raised(Exception) do
      e = Entropia.new
      assert_equal nil,    e.to_i
      assert_equal '',     e.to_s
      assert_equal 2,      e.base
      assert_equal 1,      e.entropy
      assert_equal 0.0,    e.bits
      assert_equal 0.0,    e.randomness
      assert_equal false,  e.shuffled?
      assert_equal BaseConvert::DIGITS[:P95], e.digits
    end
    assert_nothing_raised(Exception) do
      e = Entropia.new '0000'
      assert_equal 0,      e.to_i
      assert_equal '0000', e.to_s
      assert_equal 2,      e.base
      assert_equal 2**4,   e.entropy
      assert_equal 4.0,    e.bits
      assert_equal 0,      e.randomness
      assert_equal false,  e.shuffled?
      assert_equal BaseConvert::DIGITS[:P95], e.digits
    end
    assert_nothing_raised(Exception) do
      e = Entropia.new 1, entropy: 8, digits: 'ab'
      assert_equal 1,      e.to_i
      assert_equal 'aab',  e.to_s
      assert_equal 2,      e.base
      assert_equal 2**3,   e.entropy
      assert_equal 3.0,    e.bits
      assert_equal 0,      e.randomness
      assert_equal false,  e.shuffled?
      assert_equal 'ab',   e.digits
    end
  end

  def test_002_set_entropy
    e = Entropia.new
    assert_equal '', e.to_s

    e.set_entropy(2**16)
    assert_equal '0000000000000000', e.to_s
    assert_equal 2**16, e.entropy
    assert_equal 16.0, e.bits

    e = Entropia.new '', digits: '!+', shuffled: true
    assert_equal true, e.shuffled?

    e.set_entropy(2**16)
    assert_equal false, e.shuffled?
    assert_equal '!!!!!!!!!!!!!!!!', e.to_s
  end

  def test_003_set_bits
   e = Entropia.new
   assert_equal '', e.to_s

   e.set_bits(16)
   assert_equal 16.0, e.bits
   assert_equal '0000000000000000', e.to_s
   assert_equal 2**16, e.entropy
  end

  def test_004_increase
    e = Entropia.new base: 16
    assert_equal '', e.to_s

    e.increase!(3)
    assert_equal 3,     e.to_s.length
    assert_equal 16,    e.base
    assert_equal 0,     e.randomness
    assert_equal false, e.shuffled?
    assert_equal 16**3, e.entropy
    assert_equal 12.0,  e.bits

    e = Entropia.new(shuffled: true)
    assert_equal true, e.shuffled?
    e.increase!(4)
    assert_equal false, e.shuffled?
  end

  def test_005_pp # alias of increase
    a = Entropia.new
    a.p!
    b = Entropia.new
    b.p!
    assert_equal a, b
    assert_equal b, a

    b = b.p!
    e = a.p!
    assert_equal a, e
    assert_equal b, e

    assert_equal a.to_s, e.to_s
    assert_equal 2,      e.to_s.length
    assert_equal 2,      e.base
    assert_equal 0,      e.randomness
    assert_equal false,  e.shuffled?
    assert_equal 2**2,   e.entropy
    assert_equal 2.0,    e.bits

    assert_equal true, (a==e)
    a.set_shuffled true
    # Remember that a and e are the same instance
    assert_equal true, (a==e)
    # But b is a different instance.
    assert_equal false, (b==e)
  end

  def test_006_pp_rng
    rng = Object.new
    def rng.random_number(_); 10; end
    e = Entropia.new base: 16
    e.p!(6, random: rng)

    assert_equal 'AAAAAA', e.to_s
    assert_equal 16,       e.base
    # we assume rng is a source of randomness...
    assert_equal 24.0,     e.randomness
    assert_equal false,    e.shuffled?
    assert_equal 16**6,    e.entropy
    assert_equal 24.0,     e.bits
  end

  def test_007_convert_base
    e = Entropia.new.increase!(32, random: Random)
    assert_equal 16, H
    eh = e*H

    assert_equal 32, e.to_s.length
    assert_equal 8, eh.to_s.length
    # e and eh represent the same entropy
    assert_equal e, eh
    assert e==eh
  end

  def test_008_convert_base_conservation
    # Random.new(0) #radom_number(2) => 0,1,1,0,1,1,1,1
    e = E.new.p!(8, random: Random.new(0))
    # Remember that new entropia prepends the string...
    assert_equal '11110110', e.to_s
    eh = e*H # e*16
    assert_equal 2,     eh.to_s.length
    assert_equal 8,     eh.randomness
    assert_equal false, eh.shuffled?
    assert_equal 16,    eh.base
    assert_equal 2**8,  eh.entropy
    # '11110110'.to_i(2) == 246
    assert_equal 246, e.to_i
    assert_equal 246, eh.to_i
    # 246.to_s(16) == 'F6'.downcase
    assert_equal 'F6', eh.to_s
  end

  def test_009_concat_binary
    e0 = E.new.p!(4, random: Random.new(0)) #=> '0110' as random
    assert_equal '0110', e0.to_s
    assert_equal 4.0, e0.randomness

    e1 = E.new('0011') #=> '0011' definitely not random
    assert_equal '0011', e1.to_s
    assert_equal 0.0, e1.randomness

    e = e0+e1
    assert_equal '01100011', e.to_s
    assert_equal 8.0, e.bits
    assert_equal 4.0, e.randomness
    assert_equal false, e.shuffled?

    f = e.shuffle
    if f.to_s==e.to_s # unlikely... 1:256
      f = e.shuffle # u
    end
    # f.to_s==e.to_s now very unlikely... 1:65536
    refute_equal '01100011', f.to_s
    assert_equal 8.0, f.bits
    assert_equal 4.0, f.randomness
    assert_equal true, f.shuffled?
  end

  def test_010_concat_mix
    eb = E.new('0101010101010101')
    assert_equal 2, eb.base
    assert_equal 2**16, eb.entropy
    assert_equal '0101010101010101', eb.to_s
    assert_equal 0.0, eb.randomness
    assert_equal 16.0, eb.bits
    assert_equal false, eb.shuffled?

    eh = E[32]{Random}*H
    assert_equal 16, eh.base
    assert_equal 2**32, eh.entropy
    assert_equal 8, eh.to_s.length
    assert_equal 32.0, eh.randomness
    assert_equal 32.0, eh.bits
    assert_equal false, eh.shuffled?

    e = eb + eh
    s = '5555'+eh.to_s
    assert_equal s, e.to_s

    assert_equal 16, e.base
    assert_equal((2**32)*(2**16), e.entropy)
    assert_equal 16**12, e.entropy
    assert_equal Lb[16**12], e.bits
    assert_equal 48.0, e.bits
    assert_equal 12, e.to_s.length
    assert_equal 32.0, e.randomness
    assert_equal false, e.shuffled?
  end

  def test_011_concat_nuts
    eh = E.new(base: 16).p!(7, random: Random.new(0))
    assert_equal 16, eh.base
    assert_equal 16**7, eh.entropy
    assert_equal 7, eh.to_s.length
    assert_equal BaseConvert::DIGITS[:P95], eh.digits

    assert_equal 28.0, eh.randomness
    assert_equal false, eh.shuffled?

    eq = E.new(digits: :q).p!(11)
    assert_equal 91, eq.base
    assert_equal 91**11, eq.entropy
    assert_equal 11, eq.length
    assert_equal 11, eq.to_s.length
    assert_equal BaseConvert::DIGITS[:Q91], eq.digits

    assert_equal 0.0, eq.randomness
    assert_equal false, eq.shuffled?
    e = (eq.concat(eh)).shuffle
    assert_equal 91, e.base
    assert_equal BaseConvert::DIGITS[:P95], e.digits
    assert e.shuffled?
    length = Math.log(16**7 * 91**11, 91).ceil
    assert length == 16 # length is 10
    assert_equal length, e.to_s.length
    assert_equal 91**length, e.entropy

    assert_equal 28.0, e.randomness
    assert_equal true, e.shuffled?
  end

  def test_012_equal
    # For this to work,
    # entropy must be "commensarable" among the different bases used...

    # Can *NOT* use entropy 2**11 among bases 2, 8, and 16:
    refute((_=Math.log(2**11, 16))==_.to_i)
    refute((_=Math.log(2**11, 8))==_.to_i)

    # Can use entropy 2**12 among bases 2, 8, and 16:
    assert((_=Math.log(2**12, 16))==_.to_i)
    assert((_=Math.log(2**12, 8))==_.to_i)

    # Can *NOT* use 2**13 amont base 2, 8 and 16:
    refute((_=Math.log(2**13, 16))==_.to_i)
    refute((_=Math.log(2**13, 8))==_.to_i)

    # Using entropy 2**12:
    e = E.new 69, entropy: 2**12
    assert_equal '000001000101', e.to_s
    assert_equal 69, e.to_i
    assert_equal 2**12, e.entropy

    eo = e.to_base(8, 'abcdefgh')
    assert_equal 69, eo.to_i
    assert_equal 'abaf', eo.to_s
    assert_equal 2**12, eo.entropy

    eh = e.to_base(16, 'ABCDEFGHIJKLMNOP')
    assert_equal 69, eh.to_i
    assert_equal 'AEF', eh.to_s
    assert_equal 2**12, eh.entropy

    assert e == eh
    assert e == eo
    assert eh == eo
    assert eo == eh
  end

  def test_013_notation
    e = E[256]{Random}
    value = e.to_i
    assert_equal 256, e.to_s.length

    # Commensurable base combo
    assert((_=Math.log(2**256, 16))==_.to_i)
    h = e*H
    assert_equal 16, h.base
    assert_equal value, h.to_i
    assert h==e

    # Non-Commensurable base combo
    refute((_=Math.log(2**256, 8))==_.to_i)
    o = e*O
    assert_equal 8, o.base
    assert_equal value, o.to_i
    refute o==e

    # Non-Commensurable base combo
    refute((_=Math.log(2**256, 91))==_.to_i)
    q = e.to_base(Q, BaseConvert::DIGITS[:Q91])
    assert_equal 91, q.base
    assert_equal value, q.to_i
    refute q==e

    # Non-Commensurable base combo
    refute((_=Math.log(2**256, 62))==_.to_i)
    w = e*W
    assert_equal 62, w.base
    assert_equal value, w.to_i
    refute w==e
  end

  def test_014_xor
    # 555^444 == 919
    a = Entropia.new 555, base: 16
    assert_equal '22B', a.to_s
    b = Entropia.new 444, base: 16
    assert_equal '1BC', b.to_s
    c = a^b
    assert_equal 919, c.to_i
    assert_equal '397', c.to_s
    x = c^b
    assert x==a
    refute x.equal? a

    # say `a` is not random at all
    a = Entropia.new rand(2**512).to_s(16), base: 16
    assert_equal 0.0, a.randomness

    # say `b` is entirely random
    b = Entropia.new rand(2**16).to_s(8),   base: 8
    b.set_shuffled true
    b.set_randomness Lb[b.entropy]
    assert_equal b.bits, b.randomness

    # then properties of `a^b` are
    c = a^b
    assert_equal 16, c.base
    assert_equal a.entropy, c.entropy
    assert_equal b.randomness, c.randomness
    assert_equal false, c.shuffled?

    # and we can sort~of get `a` back!
    x = b^c
    assert_equal a.to_s, x.to_s
    assert_equal a.to_i, x.to_i
    # but...
    # `b^c` "thinks" it's as random as b
    assert_equal b.randomness, x.randomness
    # Can this be fixed?  :-??
  end

  def test_015_randomize
    e = Entropia.new entropy: 2**80
    assert_equal '00000000000000000000000000000000000000000000000000000000000000000000000000000000', e.to_s
    e.randomize!
    n = e.to_s.chars.count{|_|_=='1'}
    assert n.between?(20,60), 'not likely to be out of bounds'
    e = Entropia.new entropy: 2**16
    e.randomize! random: Random.new(0)
    assert_equal '0000101010101100', e.to_s
  end
end
