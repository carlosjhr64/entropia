#! ruby
require 'test/unit'
require 'entropia'

# tc_entropia_001 contains the updated tests of version 0.0.
# Additional tests motivated by version 0.1 are here.
class TestEntropia < Test::Unit::TestCase
  include ENTROPIA

  def test_020_each_bit
    n = 64**32
    e = Entropia.new rand(n), entropy: n, base: 64, digits: :base64
    s = ''
    e.each_bit{|b|s.prepend b.to_s}
    assert_equal s, e.binary
    assert_equal e.to_i, s.to_i(2)
  end

  def test_021_each_byte
    # "ABC" can be just a number(in ASCII base 256)!
    b = 256
    i = b**2*'A'.ord + b*'B'.ord + 'C'.ord
    e = Entropia.new i
    assert_equal '10000010100001001000011 2:P95 0.0% -', e.inspect
    s = ''
    e.each_byte{|c|s.prepend c.chr}
    assert_equal 'ABC', s
  end

  def test_022_commenrurable
    assert E.commensurable? 2**256, 16
    refute E.commensurable? 2**256, 64
    e = E[256]
    assert e.commensurable? 16
    refute e.commensurable? 64
  end

  def test_023_terse_instantiation
    assert_equal '0000 2:P95 0.0% -', E[4].inspect
    assert_equal '0010 2:P95 0.0% -', E[4]{'10'}.inspect
    assert_equal '0010 2:P95 0.0% -', E[4]{2}.inspect
    assert_equal 'A 16:P95 0.0% -', E[4]{'A'}.inspect
    e = E[5]{'A'} # one more bit request in base 16 expands to four more...
    assert_equal '0A 16:P95 0.0% -', e.inspect
    assert_equal 8.0, e.bits
    rng = Random.new(0)
    assert_equal '1100 2:P95 100% -', E[4]{rng}.inspect
    assert_equal '1111 2:P95 100% -', E[4]{rng}.inspect
  end

  def test_024_data
    assert_equal 'a', E.new(97).data
    # Data bytes are returned from low to high... :-??
    # It's just the way algorythm wants to be.
    assert_equal 'cba', E.new(97*(256**2) + 98*256 + 99).data
  end

  def test_024_shuffle_negation
    a = E.new 'AA', base: 64, shuffled: true
    b = E.new 'BB', base: 64, shuffled: true
    # a and b constructed as shuffled
    assert a.shuffled?
    assert b.shuffled?
    # c as a concat of a and b is not considered shuffled
    c = a+b
    refute c.shuffled?
    # d as a shuffled derivative of c is considered shuffled
    d = c.shuffle
    assert d.shuffled?
    refute c.shuffled?
    # Now, c and d have the same entropy...
    # e as <not shuffled>^<shuffled> is considered shuffled
    e = c^d
    assert e.shuffled?
    # f as <shuffled>^<not shuffled> is considered not shuffled
    f = d^c
    refute f.shuffled?
    # When one of the entries has a higher entropy...
    # <big shuffled><little not shuffled> is considered shuffled
    x = E.new 'X', base: 64, shuffled: false
    assert (d^x).shuffled?
    assert (x^d).shuffled?
  end
end
